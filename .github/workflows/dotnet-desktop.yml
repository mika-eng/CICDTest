name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install Versionize
      run: dotnet tool install --global Versionize

    - name: Get current changelog
      run: cat CHANGELOG.md >> CHANGELOG_OLD.md

    - name: Setup git
      run: |
        git config --global user.email michael.kasseckert@gmx.de
        git config --global user.name "mika-eng"
      
    - name: Versioning
      id: versionize
      run: versionize #--exit-insignificant-commits
      continue-on-error: true

    - name: Extract Latest Changelog Entry
      # This extracts only the most recent changelog entry from CHANGELOG.md
      run: |
        # Extract the latest changelog entry by looking for the first header (##)
        # This assumes a CHANGELOG.md format where each version section starts with ##
        latest_changelog=$(awk '/^### /{flag=1;next}/^### /{flag=0}flag' CHANGELOG.md)
        echo "$latest_changelog" > latest_changelog.md

    - name: Output Latest Changelog
      # Print the extracted changelog to verify
      run: cat latest_changelog.md

    - name: Set env
      run: echo "VERSION=v$(versionize inspect)" >> $GITHUB_ENV
        
    - name: No release required
      if: steps.versionize.outcome != 'success'
      run: echo "Skipping Release. No release required."

    - name: Publish
      if: steps.versionize.outcome == 'success'
      run: dotnet publish WpfApp1 --configuration release --runtime win-x64 -p:PublishSingleFile=true -p:EnableWindowsTargeting=true --self-contained false --output ./Publish
    
    - name: Push changes to GitHub
      if: steps.versionize.outcome == 'success'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
        tags: true

    - name: Publish New Repo Release
      if: steps.versionize.outcome == 'success'
      run: |
        echo Creating Repo Release
        gh release create ${{env.VERSION}} -t "Release ${{env.VERSION}}" -F latest_changelog.md

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Artifact
      if: steps.versionize.outcome == 'success'
      run: |
        echo Uploading release asset
        gh release upload ${{env.VERSION}} ./Publish/WpfApp1.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

